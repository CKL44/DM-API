
            string loc = @"C:\DocServer";              
            Converter convert2DocNum = new Converter(loc, 36); //Base36 = Enhanced  Base 32 = Unix
            convert2DocNum.WriteXML(loc);

public class Converter 
    {
        private DataTable ConvertedFiles;
       

        public Converter( string sourceFolder, int BaseType)
      {

            DataTable _dmFiles = new DataTable();
            _dmFiles.TableName = "Converted";
            _dmFiles.Columns.Add("FILENAME");
            _dmFiles.Columns.Add("DOCNUMBER");
            _dmFiles.Columns.Add("VERSION");


            TraverseTreeParallelDMFiles(sourceFolder, (f) =>
            {

                try
                {
                    //byte[] data = File.ReadAllBytes(f); // eats memory 

                }
                catch (FileNotFoundException) { }
                catch (IOException) { }
                catch (UnauthorizedAccessException) { }

              string  _fileName = Path.GetFileName(f);                            
              string convertedToDoc = ConvertBackToDocNumber(_fileName, BaseType);
              string[] parts = convertedToDoc.Split(',');
              string _docNumber = parts[0];
              string _version = parts[1];
                
                DataRow row = _dmFiles.NewRow();
                row["FILENAME"] = _fileName;
                row["DOCNUMBER"] = _docNumber;
                row["VERSION"] = _version;
                _dmFiles.Rows.Add(row);
            


                //Thread th = new Thread(() => this.ThreadSafe());
                //th.Start();



            });

            ConvertedFiles = _dmFiles;
            

        }


    
        public void WriteXML(string location)
        {
            ConvertedFiles.WriteXml(location+"\\Output.xml", XmlWriteMode.WriteSchema);
           
        }




        public static void TraverseTreeParallelDMFiles(string root, Action<string> action)
        {
            //Count of files traversed and timer for diagnostic output
            int fileCount = 0;
            var sw = Stopwatch.StartNew();

            // Determine whether to parallelize file processing on each folder based on processor count.
            int procCount = System.Environment.ProcessorCount;

            // Data structure to hold names of subfolders to be examined for files.
            Stack<string> dirs = new Stack<string>();

            if (!Directory.Exists(root))
            {
                throw new ArgumentException();
            }
            dirs.Push(root);

            while (dirs.Count > 0)
            {
                string currentDir = dirs.Pop();
                string[] subDirs = { };
                string[] files = { };

                try
                {
                    subDirs = Directory.GetDirectories(currentDir);
                }
                // Thrown if we do not have discovery permission on the directory.
                catch (UnauthorizedAccessException e)
                {
                    Console.WriteLine(e.Message);
                    continue;
                }
                // Thrown if another process has deleted the directory after we retrieved its name.
                catch (DirectoryNotFoundException e)
                {
                    Console.WriteLine(e.Message);
                    continue;
                }

                try
                {
                    files = Directory.GetFiles(currentDir);
                }
                catch (UnauthorizedAccessException e)
                {
                    Console.WriteLine(e.Message);
                    continue;
                }
                catch (DirectoryNotFoundException e)
                {
                    Console.WriteLine(e.Message);
                    continue;
                }
                catch (IOException e)
                {
                    Console.WriteLine(e.Message);
                    continue;
                }

                // Execute in parallel if there are enough files in the directory.
                // Otherwise, execute sequentially.Files are opened and processed
                // synchronously but this could be modified to perform async I/O.
                try
                {
                    if (files.Length < procCount)
                    {
                        foreach (var file in files)
                        {
                            action(file);
                            fileCount++;
                        }
                    }
                    else
                    {
                        Parallel.ForEach(files, () => 0, (file, loopState, localCount) =>
                        {
                            action(file);
                            return (int)++localCount;
                        },
                                         (c) =>
                                         {
                                             Interlocked.Add(ref fileCount, c);
                                         });
                    }
                }
                catch (AggregateException ae)
                {
                    ae.Handle((ex) =>
                    {
                        if (ex is UnauthorizedAccessException)
                        {
                            // Here we just output a message and go on.
                            Console.WriteLine(ex.Message);
                            return true;
                        }
                        // Handle other exceptions here if necessary...

                        return false;
                    });
                }

                // Push the subdirectories onto the stack for traversal.
                // This could also be done before handing the files.
                foreach (string str in subDirs)
                    dirs.Push(str);
            }





        }



        private string ConvertBackToDocNumber(string DMFileName, int BaseValue)
        {
            char[] charArray1 = DMFileName.ToCharArray();
            string str1 = "";
            string str2 = "";
            string str3 = "";
            int num1 = 0;
            char[] array = new char[37]
            {
        '0',
        '1',
        '2',
        '3',
        '4',
        '5',
        '6',
        '7',
        '8',
        '9',
        '@',
        'b',
        'c',
        'd',
        '#',
        'f',
        'g',
        'h',
        '$',
        'j',
        'k',
        'l',
        'm',
        'n',
        '_',
        'p',
        'q',
        'r',
        's',
        't',
        '%',
        'v',
        'w',
        'x',
        'y',
        'z',
        '0'
            };
            char[] chArray = new char[33]
            {
        '0',
        '1',
        '2',
        '3',
        '4',
        '5',
        '6',
        '7',
        '8',
        '9',
        'w',
        'b',
        'c',
        'd',
        'x',
        'f',
        'g',
        'h',
        'y',
        'j',
        'k',
        'l',
        'm',
        'n',
        'z',
        'p',
        'q',
        'r',
        's',
        't',
        '_',
        'v',
        '0'
            };
            try
            {
                int num2 = Array.IndexOf<char>(charArray1, '.');
                for (int index = 0; index < num2 - 3; ++index)
                    str1 += Convert.ToString(charArray1[index]);
                for (int index = num2 - 3; index < num2; ++index)
                    str2 += Convert.ToString(charArray1[index]);
                char[] charArray2 = str1.ToCharArray();
                char[] charArray3 = str2.ToCharArray();
                Array.Reverse((Array)charArray2);
                int length1 = charArray2.Length;
                for (int index = 1; index < length1; ++index)
                {
                    int num3 = Array.IndexOf<char>(array, charArray2[index]);
                    if (num3 < 0)
                        return "Invalid File Name,Invalid Version";
                    num1 += num3 * (int)Math.Pow((double)BaseValue, (double)index);
                }
                string str4 = Convert.ToString(num1 + Array.IndexOf<char>(array, charArray2[0]));
                int length2 = charArray3.Length;
                for (int index = 0; index < length2; ++index)
                {
                    if (charArray3[index] != '0' && charArray3[index] != '!' && charArray3[index] != '_')
                        str3 += Convert.ToString(charArray3[index]);
                }
                return str4 + "," + str3;
            }
            catch
            {
                return "Invalid File Name,Invalid Version";
            }
        }









    } //

}

